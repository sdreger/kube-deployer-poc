plugins {
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '2.8.0'
}

group = 'ua.hazelcast.cluster'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    generatedMapperSourcesDir = "${buildDir}/generated/sources/annotationProcessor/java/main"
    dockerJdkImageVersion = "openjdk11:jdk-11.0.10_9-alpine"
    registry = "registry.hazelcast.com"
    jarFile = "/application/${project.name}-${project.version}.jar"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation "io.fabric8:kubernetes-client:${fabric8version}"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    implementation "org.zalando:problem-spring-web:${zalandoProblemVersion}"
    implementation "com.auth0:java-jwt:3.13.0"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "io.fabric8:kubernetes-server-mock:${fabric8version}"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

test {
    useJUnitPlatform()
}

sourceSets.main {
    ext.originalJavaSrcDirs = java.srcDirs
    java.srcDir "${generatedMapperSourcesDir}"
}

jib {
    from {
        image = "adoptopenjdk/${dockerJdkImageVersion}"
    }
    to {
        image = "${registry}/${project.name}"
        tags = ['latest', project.version]
    }
    container {
        appRoot = '/application'
        workingDirectory = '/application'
        extraDirectories {
            paths {
                path {
                    from = file('build/libs/')
                    into = '/application'
                }
            }
        }
        entrypoint = ['java', '-jar', jarFile.toString()]
        ports = ['8080']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}
